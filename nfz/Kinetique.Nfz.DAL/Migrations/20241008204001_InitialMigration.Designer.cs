// <auto-generated />
using System;
using Kinetique.Nfz.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kinetique.Nfz.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241008204001_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kinetique.Nfz.Model.PatientProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientProcedures");
                });

            modelBuilder.Entity("Kinetique.Nfz.Model.SettlementProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Points")
                        .HasColumnType("numeric");

                    b.Property<long>("StatisticProcedureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatisticProcedureId")
                        .IsUnique();

                    b.ToTable("SettlementProcedures");
                });

            modelBuilder.Entity("Kinetique.Nfz.Model.StatisticProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PatientProcedureId")
                        .HasColumnType("bigint");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientProcedureId");

                    b.HasIndex("Treatment")
                        .IsUnique();

                    b.ToTable("StatisticProcedures");
                });

            modelBuilder.Entity("Kinetique.Nfz.Model.SettlementProcedure", b =>
                {
                    b.HasOne("Kinetique.Nfz.Model.StatisticProcedure", "StatisticProcedure")
                        .WithOne("SettlementProcedure")
                        .HasForeignKey("Kinetique.Nfz.Model.SettlementProcedure", "StatisticProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatisticProcedure");
                });

            modelBuilder.Entity("Kinetique.Nfz.Model.StatisticProcedure", b =>
                {
                    b.HasOne("Kinetique.Nfz.Model.PatientProcedure", null)
                        .WithMany("Procedures")
                        .HasForeignKey("PatientProcedureId");
                });

            modelBuilder.Entity("Kinetique.Nfz.Model.PatientProcedure", b =>
                {
                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("Kinetique.Nfz.Model.StatisticProcedure", b =>
                {
                    b.Navigation("SettlementProcedure")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
